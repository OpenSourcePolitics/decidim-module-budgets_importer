c
ActiveStorage::Blob.service.respond_to? :path_for && blob.respond_to?(:key)
blob.respond_to?(:key)
c
ActiveStorage::Blob.service.respond_to? root
ActiveStorage::Blob.service
q
c
C
c
 ActiveStorage::Blob.service.respond_to? :path_for
q
 ActiveStorage::Blob.service.respond_to? :path_for
yield ActiveStorage::Blob.service.path_for(blob.key)
q
yield ActiveStorage::Blob.service.path_for(blob.key)
 ActiveStorage::Blob.service.respond_to? :path_for
c
form.decidim_scope_id
form.category
form
form.scope
form
c
q
c
q
c
current_component
current_component.scopes.find_by(id: @decidim_scope_id) || current_component.scope
c
current_component.scopes.find_by(id: @decidim_scope_id) || current_component.scope
scope
q
form.decidim_scope_id
form.scope
scope
scope.id
form
q
form
form.scope
scope.id
scope_id
form
q
form
scope
form.scope
form.scope_id
form.scope
form
q
form
form.scope
q
form
form.scope
q
collection
c
collection
collection.map
c
collection.map
collection
@prepare ||= collection.map do |project_creator|
            project_creator.produce
          rescue StandardError => e
            next e
          end
collection.map do |project_creator|
            project_creator.produce
          rescue StandardError => e
            next e
          end
collection.map
@prepare
q
import_project_factory = Decidim::BudgetsImporter::Import::ImporterFactory.build(
            @form.document,
            @form.document.content_type,
            creator: Decidim::BudgetsImporter::Import::ProjectCreator,
            context: {
              current_component: @form.current_component,
              current_user: @form.current_user,
              budget: @form.budget
            }
          )
import_project_factory.prepare
@import_project_factory.prepare
import_project_factory.prepare
@import_project_factory ||= Decidim::BudgetsImporter::Import::ImporterFactory.build(
            @form.document,
            @form.document.content_type,
            creator: Decidim::BudgetsImporter::Import::ProjectCreator,
            context: {
              current_component: @form.current_component,
              current_user: @form.current_user,
              budget: @form.budget
            }
          )
@import_project_factory ||= Decidim::BudgetsImporter::Import::ImporterFactory.build(
c
@form.budget
@form.current_user
@form.current_component
@form.document.content_type
@form.document
@import_project_factory.flash_msg_type
@import_project_factory.prepare
@import_project_factory.context
@import_project_factory.errors
@import_project_factory
@import_project_factory ||= Decidim::BudgetsImporter::Import::ImporterFactory.build(
            @form.document,
            @form.document.content_type,
            creator: Decidim::BudgetsImporter::Import::ProjectCreator,
            context: {
              current_component: @form.current_component,
              current_user: @form.current_user,
              budget: @form.budget
            }
          )
@import_project_factory
Decidim::BudgetsImporter::Import::ImporterFactory.build(
            @form.document,
            @form.document.content_type,
            creator: Decidim::BudgetsImporter::Import::ProjectCreator,
            context: {
              current_component: @form.current_component,
              current_user: @form.current_user,
              budget: @form.budget
            }
          )
c
Decidim::BudgetsImporter::Import::ImporterFactory.build(
            @form.document,
            @form.document.content_type,
            creator: Decidim::BudgetsImporter::Import::ProjectCreator,
            context: {
              current_component: @form.current_component,
              current_user: @form.current_user,
              budget: @form.budget
            }
          )
c
import_project_factory.prepare
c
broadcast_registry.critical_exceptions
c
 critical_exceptions
 critical_exceptions.any?
c
q
Q
critical_exceptions.any?
broadcast_registry.invalid?
c
transaction
@form.invalid?
form
@form
